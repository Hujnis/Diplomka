services:
  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - software_network

  #________________________________________________________________________
  #                                PGADMIN
  #________________________________________________________________________
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    depends_on:
      - postgres
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - software_network

  #________________________________________________________________________
  #                                SCRAPER
  #________________________________________________________________________
  scraper:
    build: .
    container_name: scraper
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}
    volumes:
      - .:/app
      - model_data:/app/scraper/models
    working_dir: /app/scraper
    command: ["python", "scraper.py"]
    networks:
      - software_network
    dns:
      - 8.8.8.8
      - 8.8.4.4
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    
  #________________________________________________________________________
  #                           PHISHING_GENERATOR
  #________________________________________________________________________
  phishing_generator:
    build: .
    container_name: phishing_generator
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}
      HF_TOKEN: ${HF_TOKEN}
    volumes:
      - .:/app
      - model_data:/app/scraper/models
    working_dir: /app/scraper
    command: ["python", "phishing_generator.py"]
    networks:
      - software_network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  #________________________________________________________________________
  #                                WEB_API
  #________________________________________________________________________
  web_api:
    build: .
    container_name: web_api
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}
    volumes:
      - .:/app
    working_dir: /app/web_api
    ports:
      - "5000:5000"
    command: ["python", "web_api.py"]
    networks:
      - software_network

  #________________________________________________________________________
  #                             PHISHING_FORM
  #________________________________________________________________________
  phishing_form:
    build: .
    container_name: phishing_form
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}
      SECRET_KEY: ${SECRET_KEY}
    volumes:
      - .:/app

    working_dir: /app/web_api
    ports:
      - "5001:5001"
    command: ["python", "phishing_form.py"]
    networks:
      - software_network

volumes:
  pg_data:
  pgadmin_data:
  model_data:

networks:
  software_network:
    driver: bridge